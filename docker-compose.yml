version: '3.8'

services:
  # TimescaleDB (PostgreSQL with TimescaleDB extension)
  timescaledb:
    image: timescale/timescaledb:latest-pg17
    container_name: binance-timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-binance_data}
    ports:
      - "5432:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - binance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # DragonflyDB for live data publishing (Redis-compatible)
  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
    container_name: binance-dragonfly
    restart: unless-stopped
    ulimits:
      memlock: -1
    command: >
      --requirepass=${REDIS_PASSWORD:-}
      --snapshot_cron="*/5 * * * *"
    ports:
      - "6379:6379"
    volumes:
      - dragonfly_data:/data
    networks:
      - binance-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Binance Live Data Collector Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: binance-app
    restart: unless-stopped
    depends_on:
      timescaledb:
        condition: service_healthy
      dragonfly:
        condition: service_healthy
    environment:
      # Database configuration
      POSTGRES_HOST: timescaledb
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-binance_data}
      
      # DragonflyDB configuration (Redis-compatible)
      REDIS_HOST: dragonfly
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Application configuration
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./config:/app/config:ro
      - ./migrations:/app/migrations:ro
    networks:
      - binance-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis Commander for monitoring DragonflyDB
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: binance-redis-commander
    restart: unless-stopped
    depends_on:
      - dragonfly
    environment:
      REDIS_HOSTS: local:dragonfly:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    ports:
      - "8081:8081"
    networks:
      - binance-network
    profiles:
      - tools

networks:
  binance-network:
    driver: bridge

volumes:
  timescaledb_data:
    driver: local
  dragonfly_data:
    driver: local

