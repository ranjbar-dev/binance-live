// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v4.25.1
// source: proto/binance.proto

package binance

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Live data types
type DataType int32

const (
	DataType_DATA_TYPE_UNSPECIFIED DataType = 0
	DataType_DATA_TYPE_KLINE       DataType = 1
	DataType_DATA_TYPE_TICKER      DataType = 2
	DataType_DATA_TYPE_DEPTH       DataType = 3
	DataType_DATA_TYPE_TRADE       DataType = 4
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "DATA_TYPE_UNSPECIFIED",
		1: "DATA_TYPE_KLINE",
		2: "DATA_TYPE_TICKER",
		3: "DATA_TYPE_DEPTH",
		4: "DATA_TYPE_TRADE",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_UNSPECIFIED": 0,
		"DATA_TYPE_KLINE":       1,
		"DATA_TYPE_TICKER":      2,
		"DATA_TYPE_DEPTH":       3,
		"DATA_TYPE_TRADE":       4,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_binance_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_proto_binance_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_proto_binance_proto_rawDescGZIP(), []int{0}
}

// Kline data structure
type KlineData struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Interval            string                 `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	OpenTime            int64                  `protobuf:"varint,2,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`    // Unix timestamp in seconds
	CloseTime           int64                  `protobuf:"varint,3,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"` // Unix timestamp in seconds
	OpenPrice           float64                `protobuf:"fixed64,4,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice           float64                `protobuf:"fixed64,5,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice            float64                `protobuf:"fixed64,6,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	ClosePrice          float64                `protobuf:"fixed64,7,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	Volume              float64                `protobuf:"fixed64,8,opt,name=volume,proto3" json:"volume,omitempty"`
	QuoteVolume         float64                `protobuf:"fixed64,9,opt,name=quote_volume,json=quoteVolume,proto3" json:"quote_volume,omitempty"`
	TradesCount         int32                  `protobuf:"varint,10,opt,name=trades_count,json=tradesCount,proto3" json:"trades_count,omitempty"`
	TakerBuyVolume      float64                `protobuf:"fixed64,11,opt,name=taker_buy_volume,json=takerBuyVolume,proto3" json:"taker_buy_volume,omitempty"`
	TakerBuyQuoteVolume float64                `protobuf:"fixed64,12,opt,name=taker_buy_quote_volume,json=takerBuyQuoteVolume,proto3" json:"taker_buy_quote_volume,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *KlineData) Reset() {
	*x = KlineData{}
	mi := &file_proto_binance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KlineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KlineData) ProtoMessage() {}

func (x *KlineData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_binance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KlineData.ProtoReflect.Descriptor instead.
func (*KlineData) Descriptor() ([]byte, []int) {
	return file_proto_binance_proto_rawDescGZIP(), []int{0}
}

func (x *KlineData) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *KlineData) GetOpenTime() int64 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *KlineData) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *KlineData) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *KlineData) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *KlineData) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *KlineData) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *KlineData) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *KlineData) GetQuoteVolume() float64 {
	if x != nil {
		return x.QuoteVolume
	}
	return 0
}

func (x *KlineData) GetTradesCount() int32 {
	if x != nil {
		return x.TradesCount
	}
	return 0
}

func (x *KlineData) GetTakerBuyVolume() float64 {
	if x != nil {
		return x.TakerBuyVolume
	}
	return 0
}

func (x *KlineData) GetTakerBuyQuoteVolume() float64 {
	if x != nil {
		return x.TakerBuyQuoteVolume
	}
	return 0
}

// Ticker data structure
type TickerData struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Price                  float64                `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	BidPrice               *float64               `protobuf:"fixed64,2,opt,name=bid_price,json=bidPrice,proto3,oneof" json:"bid_price,omitempty"`
	BidQty                 *float64               `protobuf:"fixed64,3,opt,name=bid_qty,json=bidQty,proto3,oneof" json:"bid_qty,omitempty"`
	AskPrice               *float64               `protobuf:"fixed64,4,opt,name=ask_price,json=askPrice,proto3,oneof" json:"ask_price,omitempty"`
	AskQty                 *float64               `protobuf:"fixed64,5,opt,name=ask_qty,json=askQty,proto3,oneof" json:"ask_qty,omitempty"`
	Volume_24H             *float64               `protobuf:"fixed64,6,opt,name=volume_24h,json=volume24h,proto3,oneof" json:"volume_24h,omitempty"`
	QuoteVolume_24H        *float64               `protobuf:"fixed64,7,opt,name=quote_volume_24h,json=quoteVolume24h,proto3,oneof" json:"quote_volume_24h,omitempty"`
	PriceChange_24H        *float64               `protobuf:"fixed64,8,opt,name=price_change_24h,json=priceChange24h,proto3,oneof" json:"price_change_24h,omitempty"`
	PriceChangePercent_24H *float64               `protobuf:"fixed64,9,opt,name=price_change_percent_24h,json=priceChangePercent24h,proto3,oneof" json:"price_change_percent_24h,omitempty"`
	High_24H               *float64               `protobuf:"fixed64,10,opt,name=high_24h,json=high24h,proto3,oneof" json:"high_24h,omitempty"`
	Low_24H                *float64               `protobuf:"fixed64,11,opt,name=low_24h,json=low24h,proto3,oneof" json:"low_24h,omitempty"`
	TradesCount_24H        *int32                 `protobuf:"varint,12,opt,name=trades_count_24h,json=tradesCount24h,proto3,oneof" json:"trades_count_24h,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TickerData) Reset() {
	*x = TickerData{}
	mi := &file_proto_binance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TickerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerData) ProtoMessage() {}

func (x *TickerData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_binance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerData.ProtoReflect.Descriptor instead.
func (*TickerData) Descriptor() ([]byte, []int) {
	return file_proto_binance_proto_rawDescGZIP(), []int{1}
}

func (x *TickerData) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TickerData) GetBidPrice() float64 {
	if x != nil && x.BidPrice != nil {
		return *x.BidPrice
	}
	return 0
}

func (x *TickerData) GetBidQty() float64 {
	if x != nil && x.BidQty != nil {
		return *x.BidQty
	}
	return 0
}

func (x *TickerData) GetAskPrice() float64 {
	if x != nil && x.AskPrice != nil {
		return *x.AskPrice
	}
	return 0
}

func (x *TickerData) GetAskQty() float64 {
	if x != nil && x.AskQty != nil {
		return *x.AskQty
	}
	return 0
}

func (x *TickerData) GetVolume_24H() float64 {
	if x != nil && x.Volume_24H != nil {
		return *x.Volume_24H
	}
	return 0
}

func (x *TickerData) GetQuoteVolume_24H() float64 {
	if x != nil && x.QuoteVolume_24H != nil {
		return *x.QuoteVolume_24H
	}
	return 0
}

func (x *TickerData) GetPriceChange_24H() float64 {
	if x != nil && x.PriceChange_24H != nil {
		return *x.PriceChange_24H
	}
	return 0
}

func (x *TickerData) GetPriceChangePercent_24H() float64 {
	if x != nil && x.PriceChangePercent_24H != nil {
		return *x.PriceChangePercent_24H
	}
	return 0
}

func (x *TickerData) GetHigh_24H() float64 {
	if x != nil && x.High_24H != nil {
		return *x.High_24H
	}
	return 0
}

func (x *TickerData) GetLow_24H() float64 {
	if x != nil && x.Low_24H != nil {
		return *x.Low_24H
	}
	return 0
}

func (x *TickerData) GetTradesCount_24H() int32 {
	if x != nil && x.TradesCount_24H != nil {
		return *x.TradesCount_24H
	}
	return 0
}

// Depth data structure
type DepthData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastUpdateId  int64                  `protobuf:"varint,1,opt,name=last_update_id,json=lastUpdateId,proto3" json:"last_update_id,omitempty"`
	Bids          []*PriceLevel          `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks          []*PriceLevel          `protobuf:"bytes,3,rep,name=asks,proto3" json:"asks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepthData) Reset() {
	*x = DepthData{}
	mi := &file_proto_binance_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepthData) ProtoMessage() {}

func (x *DepthData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_binance_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepthData.ProtoReflect.Descriptor instead.
func (*DepthData) Descriptor() ([]byte, []int) {
	return file_proto_binance_proto_rawDescGZIP(), []int{2}
}

func (x *DepthData) GetLastUpdateId() int64 {
	if x != nil {
		return x.LastUpdateId
	}
	return 0
}

func (x *DepthData) GetBids() []*PriceLevel {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *DepthData) GetAsks() []*PriceLevel {
	if x != nil {
		return x.Asks
	}
	return nil
}

// Price level for depth data
type PriceLevel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         float64                `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Quantity      float64                `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceLevel) Reset() {
	*x = PriceLevel{}
	mi := &file_proto_binance_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceLevel) ProtoMessage() {}

func (x *PriceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_binance_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceLevel.ProtoReflect.Descriptor instead.
func (*PriceLevel) Descriptor() ([]byte, []int) {
	return file_proto_binance_proto_rawDescGZIP(), []int{3}
}

func (x *PriceLevel) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PriceLevel) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// Trade data structure
type TradeData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TradeId       int64                  `protobuf:"varint,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Price         float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Quantity      float64                `protobuf:"fixed64,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	QuoteQuantity float64                `protobuf:"fixed64,4,opt,name=quote_quantity,json=quoteQuantity,proto3" json:"quote_quantity,omitempty"`
	IsBuyerMaker  bool                   `protobuf:"varint,5,opt,name=is_buyer_maker,json=isBuyerMaker,proto3" json:"is_buyer_maker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeData) Reset() {
	*x = TradeData{}
	mi := &file_proto_binance_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeData) ProtoMessage() {}

func (x *TradeData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_binance_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeData.ProtoReflect.Descriptor instead.
func (*TradeData) Descriptor() ([]byte, []int) {
	return file_proto_binance_proto_rawDescGZIP(), []int{4}
}

func (x *TradeData) GetTradeId() int64 {
	if x != nil {
		return x.TradeId
	}
	return 0
}

func (x *TradeData) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeData) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *TradeData) GetQuoteQuantity() float64 {
	if x != nil {
		return x.QuoteQuantity
	}
	return 0
}

func (x *TradeData) GetIsBuyerMaker() bool {
	if x != nil {
		return x.IsBuyerMaker
	}
	return false
}

// Main live data message
type LiveData struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Type      DataType               `protobuf:"varint,1,opt,name=type,proto3,enum=binance.DataType" json:"type,omitempty"`
	Symbol    string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Timestamp int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Unix timestamp in milliseconds
	// Types that are valid to be assigned to Data:
	//
	//	*LiveData_Kline
	//	*LiveData_Ticker
	//	*LiveData_Depth
	//	*LiveData_Trade
	Data          isLiveData_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveData) Reset() {
	*x = LiveData{}
	mi := &file_proto_binance_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveData) ProtoMessage() {}

func (x *LiveData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_binance_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveData.ProtoReflect.Descriptor instead.
func (*LiveData) Descriptor() ([]byte, []int) {
	return file_proto_binance_proto_rawDescGZIP(), []int{5}
}

func (x *LiveData) GetType() DataType {
	if x != nil {
		return x.Type
	}
	return DataType_DATA_TYPE_UNSPECIFIED
}

func (x *LiveData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *LiveData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LiveData) GetData() isLiveData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LiveData) GetKline() *KlineData {
	if x != nil {
		if x, ok := x.Data.(*LiveData_Kline); ok {
			return x.Kline
		}
	}
	return nil
}

func (x *LiveData) GetTicker() *TickerData {
	if x != nil {
		if x, ok := x.Data.(*LiveData_Ticker); ok {
			return x.Ticker
		}
	}
	return nil
}

func (x *LiveData) GetDepth() *DepthData {
	if x != nil {
		if x, ok := x.Data.(*LiveData_Depth); ok {
			return x.Depth
		}
	}
	return nil
}

func (x *LiveData) GetTrade() *TradeData {
	if x != nil {
		if x, ok := x.Data.(*LiveData_Trade); ok {
			return x.Trade
		}
	}
	return nil
}

type isLiveData_Data interface {
	isLiveData_Data()
}

type LiveData_Kline struct {
	Kline *KlineData `protobuf:"bytes,4,opt,name=kline,proto3,oneof"`
}

type LiveData_Ticker struct {
	Ticker *TickerData `protobuf:"bytes,5,opt,name=ticker,proto3,oneof"`
}

type LiveData_Depth struct {
	Depth *DepthData `protobuf:"bytes,6,opt,name=depth,proto3,oneof"`
}

type LiveData_Trade struct {
	Trade *TradeData `protobuf:"bytes,7,opt,name=trade,proto3,oneof"`
}

func (*LiveData_Kline) isLiveData_Data() {}

func (*LiveData_Ticker) isLiveData_Data() {}

func (*LiveData_Depth) isLiveData_Data() {}

func (*LiveData_Trade) isLiveData_Data() {}

// Symbol list message
type SymbolList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbols       []string               `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // When the list was generated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SymbolList) Reset() {
	*x = SymbolList{}
	mi := &file_proto_binance_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolList) ProtoMessage() {}

func (x *SymbolList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_binance_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolList.ProtoReflect.Descriptor instead.
func (*SymbolList) Descriptor() ([]byte, []int) {
	return file_proto_binance_proto_rawDescGZIP(), []int{6}
}

func (x *SymbolList) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *SymbolList) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_proto_binance_proto protoreflect.FileDescriptor

const file_proto_binance_proto_rawDesc = "" +
	"\n" +
	"\x13proto/binance.proto\x12\abinance\"\x9c\x03\n" +
	"\tKlineData\x12\x1a\n" +
	"\binterval\x18\x01 \x01(\tR\binterval\x12\x1b\n" +
	"\topen_time\x18\x02 \x01(\x03R\bopenTime\x12\x1d\n" +
	"\n" +
	"close_time\x18\x03 \x01(\x03R\tcloseTime\x12\x1d\n" +
	"\n" +
	"open_price\x18\x04 \x01(\x01R\topenPrice\x12\x1d\n" +
	"\n" +
	"high_price\x18\x05 \x01(\x01R\thighPrice\x12\x1b\n" +
	"\tlow_price\x18\x06 \x01(\x01R\blowPrice\x12\x1f\n" +
	"\vclose_price\x18\a \x01(\x01R\n" +
	"closePrice\x12\x16\n" +
	"\x06volume\x18\b \x01(\x01R\x06volume\x12!\n" +
	"\fquote_volume\x18\t \x01(\x01R\vquoteVolume\x12!\n" +
	"\ftrades_count\x18\n" +
	" \x01(\x05R\vtradesCount\x12(\n" +
	"\x10taker_buy_volume\x18\v \x01(\x01R\x0etakerBuyVolume\x123\n" +
	"\x16taker_buy_quote_volume\x18\f \x01(\x01R\x13takerBuyQuoteVolume\"\x87\x05\n" +
	"\n" +
	"TickerData\x12\x14\n" +
	"\x05price\x18\x01 \x01(\x01R\x05price\x12 \n" +
	"\tbid_price\x18\x02 \x01(\x01H\x00R\bbidPrice\x88\x01\x01\x12\x1c\n" +
	"\abid_qty\x18\x03 \x01(\x01H\x01R\x06bidQty\x88\x01\x01\x12 \n" +
	"\task_price\x18\x04 \x01(\x01H\x02R\baskPrice\x88\x01\x01\x12\x1c\n" +
	"\aask_qty\x18\x05 \x01(\x01H\x03R\x06askQty\x88\x01\x01\x12\"\n" +
	"\n" +
	"volume_24h\x18\x06 \x01(\x01H\x04R\tvolume24h\x88\x01\x01\x12-\n" +
	"\x10quote_volume_24h\x18\a \x01(\x01H\x05R\x0equoteVolume24h\x88\x01\x01\x12-\n" +
	"\x10price_change_24h\x18\b \x01(\x01H\x06R\x0epriceChange24h\x88\x01\x01\x12<\n" +
	"\x18price_change_percent_24h\x18\t \x01(\x01H\aR\x15priceChangePercent24h\x88\x01\x01\x12\x1e\n" +
	"\bhigh_24h\x18\n" +
	" \x01(\x01H\bR\ahigh24h\x88\x01\x01\x12\x1c\n" +
	"\alow_24h\x18\v \x01(\x01H\tR\x06low24h\x88\x01\x01\x12-\n" +
	"\x10trades_count_24h\x18\f \x01(\x05H\n" +
	"R\x0etradesCount24h\x88\x01\x01B\f\n" +
	"\n" +
	"_bid_priceB\n" +
	"\n" +
	"\b_bid_qtyB\f\n" +
	"\n" +
	"_ask_priceB\n" +
	"\n" +
	"\b_ask_qtyB\r\n" +
	"\v_volume_24hB\x13\n" +
	"\x11_quote_volume_24hB\x13\n" +
	"\x11_price_change_24hB\x1b\n" +
	"\x19_price_change_percent_24hB\v\n" +
	"\t_high_24hB\n" +
	"\n" +
	"\b_low_24hB\x13\n" +
	"\x11_trades_count_24h\"\x83\x01\n" +
	"\tDepthData\x12$\n" +
	"\x0elast_update_id\x18\x01 \x01(\x03R\flastUpdateId\x12'\n" +
	"\x04bids\x18\x02 \x03(\v2\x13.binance.PriceLevelR\x04bids\x12'\n" +
	"\x04asks\x18\x03 \x03(\v2\x13.binance.PriceLevelR\x04asks\">\n" +
	"\n" +
	"PriceLevel\x12\x14\n" +
	"\x05price\x18\x01 \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\x02 \x01(\x01R\bquantity\"\xa5\x01\n" +
	"\tTradeData\x12\x19\n" +
	"\btrade_id\x18\x01 \x01(\x03R\atradeId\x12\x14\n" +
	"\x05price\x18\x02 \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\x01R\bquantity\x12%\n" +
	"\x0equote_quantity\x18\x04 \x01(\x01R\rquoteQuantity\x12$\n" +
	"\x0eis_buyer_maker\x18\x05 \x01(\bR\fisBuyerMaker\"\xa2\x02\n" +
	"\bLiveData\x12%\n" +
	"\x04type\x18\x01 \x01(\x0e2\x11.binance.DataTypeR\x04type\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12*\n" +
	"\x05kline\x18\x04 \x01(\v2\x12.binance.KlineDataH\x00R\x05kline\x12-\n" +
	"\x06ticker\x18\x05 \x01(\v2\x13.binance.TickerDataH\x00R\x06ticker\x12*\n" +
	"\x05depth\x18\x06 \x01(\v2\x12.binance.DepthDataH\x00R\x05depth\x12*\n" +
	"\x05trade\x18\a \x01(\v2\x12.binance.TradeDataH\x00R\x05tradeB\x06\n" +
	"\x04data\"D\n" +
	"\n" +
	"SymbolList\x12\x18\n" +
	"\asymbols\x18\x01 \x03(\tR\asymbols\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp*z\n" +
	"\bDataType\x12\x19\n" +
	"\x15DATA_TYPE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fDATA_TYPE_KLINE\x10\x01\x12\x14\n" +
	"\x10DATA_TYPE_TICKER\x10\x02\x12\x13\n" +
	"\x0fDATA_TYPE_DEPTH\x10\x03\x12\x13\n" +
	"\x0fDATA_TYPE_TRADE\x10\x04B'Z%github.com/binance-live/proto/binanceb\x06proto3"

var (
	file_proto_binance_proto_rawDescOnce sync.Once
	file_proto_binance_proto_rawDescData []byte
)

func file_proto_binance_proto_rawDescGZIP() []byte {
	file_proto_binance_proto_rawDescOnce.Do(func() {
		file_proto_binance_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_binance_proto_rawDesc), len(file_proto_binance_proto_rawDesc)))
	})
	return file_proto_binance_proto_rawDescData
}

var file_proto_binance_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_binance_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_binance_proto_goTypes = []any{
	(DataType)(0),      // 0: binance.DataType
	(*KlineData)(nil),  // 1: binance.KlineData
	(*TickerData)(nil), // 2: binance.TickerData
	(*DepthData)(nil),  // 3: binance.DepthData
	(*PriceLevel)(nil), // 4: binance.PriceLevel
	(*TradeData)(nil),  // 5: binance.TradeData
	(*LiveData)(nil),   // 6: binance.LiveData
	(*SymbolList)(nil), // 7: binance.SymbolList
}
var file_proto_binance_proto_depIdxs = []int32{
	4, // 0: binance.DepthData.bids:type_name -> binance.PriceLevel
	4, // 1: binance.DepthData.asks:type_name -> binance.PriceLevel
	0, // 2: binance.LiveData.type:type_name -> binance.DataType
	1, // 3: binance.LiveData.kline:type_name -> binance.KlineData
	2, // 4: binance.LiveData.ticker:type_name -> binance.TickerData
	3, // 5: binance.LiveData.depth:type_name -> binance.DepthData
	5, // 6: binance.LiveData.trade:type_name -> binance.TradeData
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_proto_binance_proto_init() }
func file_proto_binance_proto_init() {
	if File_proto_binance_proto != nil {
		return
	}
	file_proto_binance_proto_msgTypes[1].OneofWrappers = []any{}
	file_proto_binance_proto_msgTypes[5].OneofWrappers = []any{
		(*LiveData_Kline)(nil),
		(*LiveData_Ticker)(nil),
		(*LiveData_Depth)(nil),
		(*LiveData_Trade)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_binance_proto_rawDesc), len(file_proto_binance_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_binance_proto_goTypes,
		DependencyIndexes: file_proto_binance_proto_depIdxs,
		EnumInfos:         file_proto_binance_proto_enumTypes,
		MessageInfos:      file_proto_binance_proto_msgTypes,
	}.Build()
	File_proto_binance_proto = out.File
	file_proto_binance_proto_goTypes = nil
	file_proto_binance_proto_depIdxs = nil
}
