// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: symbols.sql

package db

import (
	"context"
)

const DeleteSymbol = `-- name: DeleteSymbol :exec
DELETE FROM symbols WHERE symbol = $1
`

func (q *Queries) DeleteSymbol(ctx context.Context, symbol string) error {
	_, err := q.db.Exec(ctx, DeleteSymbol, symbol)
	return err
}

const GetActiveSymbols = `-- name: GetActiveSymbols :many
SELECT id, symbol, base_asset, quote_asset, status, is_active, created_at, updated_at
FROM symbols
WHERE is_active = true
ORDER BY symbol
`

func (q *Queries) GetActiveSymbols(ctx context.Context) ([]Symbol, error) {
	rows, err := q.db.Query(ctx, GetActiveSymbols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Symbol{}
	for rows.Next() {
		var i Symbol
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.BaseAsset,
			&i.QuoteAsset,
			&i.Status,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAllSymbols = `-- name: GetAllSymbols :many
SELECT id, symbol, base_asset, quote_asset, status, is_active, created_at, updated_at
FROM symbols
ORDER BY symbol
`

func (q *Queries) GetAllSymbols(ctx context.Context) ([]Symbol, error) {
	rows, err := q.db.Query(ctx, GetAllSymbols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Symbol{}
	for rows.Next() {
		var i Symbol
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.BaseAsset,
			&i.QuoteAsset,
			&i.Status,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSymbolByName = `-- name: GetSymbolByName :one
SELECT id, symbol, base_asset, quote_asset, status, is_active, created_at, updated_at
FROM symbols
WHERE symbol = $1
`

func (q *Queries) GetSymbolByName(ctx context.Context, symbol string) (Symbol, error) {
	row := q.db.QueryRow(ctx, GetSymbolByName, symbol)
	var i Symbol
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.BaseAsset,
		&i.QuoteAsset,
		&i.Status,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateSymbolStatus = `-- name: UpdateSymbolStatus :exec
UPDATE symbols
SET is_active = $2, updated_at = EXTRACT(EPOCH FROM NOW()) * 1000
WHERE symbol = $1
`

type UpdateSymbolStatusParams struct {
	Symbol   string `db:"symbol" json:"symbol"`
	IsActive bool   `db:"is_active" json:"is_active"`
}

func (q *Queries) UpdateSymbolStatus(ctx context.Context, arg UpdateSymbolStatusParams) error {
	_, err := q.db.Exec(ctx, UpdateSymbolStatus, arg.Symbol, arg.IsActive)
	return err
}

const UpsertSymbol = `-- name: UpsertSymbol :one
INSERT INTO symbols (symbol, base_asset, quote_asset, status, is_active)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (symbol) DO UPDATE SET
    base_asset = EXCLUDED.base_asset,
    quote_asset = EXCLUDED.quote_asset,
    status = EXCLUDED.status,
    is_active = EXCLUDED.is_active,
    updated_at = EXTRACT(EPOCH FROM NOW()) * 1000
RETURNING id, created_at, updated_at
`

type UpsertSymbolParams struct {
	Symbol     string `db:"symbol" json:"symbol"`
	BaseAsset  string `db:"base_asset" json:"base_asset"`
	QuoteAsset string `db:"quote_asset" json:"quote_asset"`
	Status     string `db:"status" json:"status"`
	IsActive   bool   `db:"is_active" json:"is_active"`
}

type UpsertSymbolRow struct {
	ID        int32 `db:"id" json:"id"`
	CreatedAt int64 `db:"created_at" json:"created_at"`
	UpdatedAt int64 `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpsertSymbol(ctx context.Context, arg UpsertSymbolParams) (UpsertSymbolRow, error) {
	row := q.db.QueryRow(ctx, UpsertSymbol,
		arg.Symbol,
		arg.BaseAsset,
		arg.QuoteAsset,
		arg.Status,
		arg.IsActive,
	)
	var i UpsertSymbolRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
