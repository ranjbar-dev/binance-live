// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tickers.sql

package db

import (
	"context"
	"database/sql"
)

const DeleteOldTickers = `-- name: DeleteOldTickers :exec
DELETE FROM tickers 
WHERE timestamp < $1
`

func (q *Queries) DeleteOldTickers(ctx context.Context, timestamp int64) error {
	_, err := q.db.Exec(ctx, DeleteOldTickers, timestamp)
	return err
}

const GetAllLatestTickers = `-- name: GetAllLatestTickers :many
SELECT DISTINCT ON (symbol) symbol, timestamp, price, bid_price, bid_qty, ask_price, ask_qty,
       volume_24h, quote_volume_24h, price_change_24h, price_change_percent_24h,
       high_24h, low_24h, trades_count_24h, created_at
FROM tickers
ORDER BY symbol, timestamp DESC
`

func (q *Queries) GetAllLatestTickers(ctx context.Context) ([]Ticker, error) {
	rows, err := q.db.Query(ctx, GetAllLatestTickers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticker{}
	for rows.Next() {
		var i Ticker
		if err := rows.Scan(
			&i.Symbol,
			&i.Timestamp,
			&i.Price,
			&i.BidPrice,
			&i.BidQty,
			&i.AskPrice,
			&i.AskQty,
			&i.Volume24h,
			&i.QuoteVolume24h,
			&i.PriceChange24h,
			&i.PriceChangePercent24h,
			&i.High24h,
			&i.Low24h,
			&i.TradesCount24h,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetLatestTicker = `-- name: GetLatestTicker :one
SELECT symbol, timestamp, price, bid_price, bid_qty, ask_price, ask_qty,
       volume_24h, quote_volume_24h, price_change_24h, price_change_percent_24h,
       high_24h, low_24h, trades_count_24h, created_at
FROM tickers
WHERE symbol = $1
ORDER BY timestamp DESC
LIMIT 1
`

func (q *Queries) GetLatestTicker(ctx context.Context, symbol string) (Ticker, error) {
	row := q.db.QueryRow(ctx, GetLatestTicker, symbol)
	var i Ticker
	err := row.Scan(
		&i.Symbol,
		&i.Timestamp,
		&i.Price,
		&i.BidPrice,
		&i.BidQty,
		&i.AskPrice,
		&i.AskQty,
		&i.Volume24h,
		&i.QuoteVolume24h,
		&i.PriceChange24h,
		&i.PriceChangePercent24h,
		&i.High24h,
		&i.Low24h,
		&i.TradesCount24h,
		&i.CreatedAt,
	)
	return i, err
}

const GetTickersByTimeRange = `-- name: GetTickersByTimeRange :many
SELECT symbol, timestamp, price, bid_price, bid_qty, ask_price, ask_qty,
       volume_24h, quote_volume_24h, price_change_24h, price_change_percent_24h,
       high_24h, low_24h, trades_count_24h, created_at
FROM tickers
WHERE symbol = $1
  AND timestamp >= $2 AND timestamp < $3
ORDER BY timestamp ASC
`

type GetTickersByTimeRangeParams struct {
	Symbol      string `db:"symbol" json:"symbol"`
	Timestamp   int64  `db:"timestamp" json:"timestamp"`
	Timestamp_2 int64  `db:"timestamp_2" json:"timestamp_2"`
}

func (q *Queries) GetTickersByTimeRange(ctx context.Context, arg GetTickersByTimeRangeParams) ([]Ticker, error) {
	rows, err := q.db.Query(ctx, GetTickersByTimeRange, arg.Symbol, arg.Timestamp, arg.Timestamp_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticker{}
	for rows.Next() {
		var i Ticker
		if err := rows.Scan(
			&i.Symbol,
			&i.Timestamp,
			&i.Price,
			&i.BidPrice,
			&i.BidQty,
			&i.AskPrice,
			&i.AskQty,
			&i.Volume24h,
			&i.QuoteVolume24h,
			&i.PriceChange24h,
			&i.PriceChangePercent24h,
			&i.High24h,
			&i.Low24h,
			&i.TradesCount24h,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const InsertTicker = `-- name: InsertTicker :exec
INSERT INTO tickers (
    symbol, timestamp, price, bid_price, bid_qty, ask_price, ask_qty,
    volume_24h, quote_volume_24h, price_change_24h, price_change_percent_24h,
    high_24h, low_24h, trades_count_24h
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
ON CONFLICT (symbol, timestamp) DO UPDATE SET
    price = EXCLUDED.price,
    bid_price = EXCLUDED.bid_price,
    bid_qty = EXCLUDED.bid_qty,
    ask_price = EXCLUDED.ask_price,
    ask_qty = EXCLUDED.ask_qty,
    volume_24h = EXCLUDED.volume_24h,
    quote_volume_24h = EXCLUDED.quote_volume_24h,
    price_change_24h = EXCLUDED.price_change_24h,
    price_change_percent_24h = EXCLUDED.price_change_percent_24h,
    high_24h = EXCLUDED.high_24h,
    low_24h = EXCLUDED.low_24h,
    trades_count_24h = EXCLUDED.trades_count_24h
`

type InsertTickerParams struct {
	Symbol                string          `db:"symbol" json:"symbol"`
	Timestamp             int64           `db:"timestamp" json:"timestamp"`
	Price                 float64         `db:"price" json:"price"`
	BidPrice              sql.NullFloat64 `db:"bid_price" json:"bid_price"`
	BidQty                sql.NullFloat64 `db:"bid_qty" json:"bid_qty"`
	AskPrice              sql.NullFloat64 `db:"ask_price" json:"ask_price"`
	AskQty                sql.NullFloat64 `db:"ask_qty" json:"ask_qty"`
	Volume24h             sql.NullFloat64 `db:"volume_24h" json:"volume_24h"`
	QuoteVolume24h        sql.NullFloat64 `db:"quote_volume_24h" json:"quote_volume_24h"`
	PriceChange24h        sql.NullFloat64 `db:"price_change_24h" json:"price_change_24h"`
	PriceChangePercent24h sql.NullFloat64 `db:"price_change_percent_24h" json:"price_change_percent_24h"`
	High24h               sql.NullFloat64 `db:"high_24h" json:"high_24h"`
	Low24h                sql.NullFloat64 `db:"low_24h" json:"low_24h"`
	TradesCount24h        sql.NullInt32   `db:"trades_count_24h" json:"trades_count_24h"`
}

func (q *Queries) InsertTicker(ctx context.Context, arg InsertTickerParams) error {
	_, err := q.db.Exec(ctx, InsertTicker,
		arg.Symbol,
		arg.Timestamp,
		arg.Price,
		arg.BidPrice,
		arg.BidQty,
		arg.AskPrice,
		arg.AskQty,
		arg.Volume24h,
		arg.QuoteVolume24h,
		arg.PriceChange24h,
		arg.PriceChangePercent24h,
		arg.High24h,
		arg.Low24h,
		arg.TradesCount24h,
	)
	return err
}
