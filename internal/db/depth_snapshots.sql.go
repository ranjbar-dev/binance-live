// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: depth_snapshots.sql

package db

import (
	"context"
)

const DeleteOldDepthSnapshots = `-- name: DeleteOldDepthSnapshots :exec
DELETE FROM depth_snapshots 
WHERE timestamp < $1
`

func (q *Queries) DeleteOldDepthSnapshots(ctx context.Context, timestamp int64) error {
	_, err := q.db.Exec(ctx, DeleteOldDepthSnapshots, timestamp)
	return err
}

const GetDepthSnapshotsByTimeRange = `-- name: GetDepthSnapshotsByTimeRange :many
SELECT id, symbol, timestamp, last_update_id, bids, asks, created_at
FROM depth_snapshots
WHERE symbol = $1
  AND timestamp >= $2 AND timestamp < $3
ORDER BY timestamp ASC
`

type GetDepthSnapshotsByTimeRangeParams struct {
	Symbol      string `db:"symbol" json:"symbol"`
	Timestamp   int64  `db:"timestamp" json:"timestamp"`
	Timestamp_2 int64  `db:"timestamp_2" json:"timestamp_2"`
}

func (q *Queries) GetDepthSnapshotsByTimeRange(ctx context.Context, arg GetDepthSnapshotsByTimeRangeParams) ([]DepthSnapshot, error) {
	rows, err := q.db.Query(ctx, GetDepthSnapshotsByTimeRange, arg.Symbol, arg.Timestamp, arg.Timestamp_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DepthSnapshot{}
	for rows.Next() {
		var i DepthSnapshot
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Timestamp,
			&i.LastUpdateID,
			&i.Bids,
			&i.Asks,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetLatestDepthSnapshot = `-- name: GetLatestDepthSnapshot :one
SELECT id, symbol, timestamp, last_update_id, bids, asks, created_at
FROM depth_snapshots
WHERE symbol = $1
ORDER BY timestamp DESC
LIMIT 1
`

func (q *Queries) GetLatestDepthSnapshot(ctx context.Context, symbol string) (DepthSnapshot, error) {
	row := q.db.QueryRow(ctx, GetLatestDepthSnapshot, symbol)
	var i DepthSnapshot
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Timestamp,
		&i.LastUpdateID,
		&i.Bids,
		&i.Asks,
		&i.CreatedAt,
	)
	return i, err
}

const InsertDepthSnapshot = `-- name: InsertDepthSnapshot :one
INSERT INTO depth_snapshots (
    symbol, timestamp, last_update_id, bids, asks
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at
`

type InsertDepthSnapshotParams struct {
	Symbol       string `db:"symbol" json:"symbol"`
	Timestamp    int64  `db:"timestamp" json:"timestamp"`
	LastUpdateID int64  `db:"last_update_id" json:"last_update_id"`
	Bids         []byte `db:"bids" json:"bids"`
	Asks         []byte `db:"asks" json:"asks"`
}

type InsertDepthSnapshotRow struct {
	ID        int64 `db:"id" json:"id"`
	CreatedAt int64 `db:"created_at" json:"created_at"`
}

func (q *Queries) InsertDepthSnapshot(ctx context.Context, arg InsertDepthSnapshotParams) (InsertDepthSnapshotRow, error) {
	row := q.db.QueryRow(ctx, InsertDepthSnapshot,
		arg.Symbol,
		arg.Timestamp,
		arg.LastUpdateID,
		arg.Bids,
		arg.Asks,
	)
	var i InsertDepthSnapshotRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}
